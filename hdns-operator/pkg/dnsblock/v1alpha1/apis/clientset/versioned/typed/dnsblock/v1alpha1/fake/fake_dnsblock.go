/* AUTO GENERATED CODE */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/hamedetemaad/hdns-operator/pkg/dnsblock/v1alpha1"
	dnsblockv1alpha1 "github.com/hamedetemaad/hdns-operator/pkg/dnsblock/v1alpha1/apis/applyconfiguration/dnsblock/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDNSBlocks implements DNSBlockInterface
type FakeDNSBlocks struct {
	Fake *FakeHdnsV1alpha1
	ns   string
}

var dnsblocksResource = v1alpha1.SchemeGroupVersion.WithResource("dnsblocks")

var dnsblocksKind = v1alpha1.SchemeGroupVersion.WithKind("DNSBlock")

// Get takes name of the dNSBlock, and returns the corresponding dNSBlock object, and an error if there is any.
func (c *FakeDNSBlocks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.DNSBlock, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(dnsblocksResource, c.ns, name), &v1alpha1.DNSBlock{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DNSBlock), err
}

// List takes label and field selectors, and returns the list of DNSBlocks that match those selectors.
func (c *FakeDNSBlocks) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.DNSBlockList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(dnsblocksResource, dnsblocksKind, c.ns, opts), &v1alpha1.DNSBlockList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.DNSBlockList{ListMeta: obj.(*v1alpha1.DNSBlockList).ListMeta}
	for _, item := range obj.(*v1alpha1.DNSBlockList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested dNSBlocks.
func (c *FakeDNSBlocks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(dnsblocksResource, c.ns, opts))

}

// Create takes the representation of a dNSBlock and creates it.  Returns the server's representation of the dNSBlock, and an error, if there is any.
func (c *FakeDNSBlocks) Create(ctx context.Context, dNSBlock *v1alpha1.DNSBlock, opts v1.CreateOptions) (result *v1alpha1.DNSBlock, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(dnsblocksResource, c.ns, dNSBlock), &v1alpha1.DNSBlock{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DNSBlock), err
}

// Update takes the representation of a dNSBlock and updates it. Returns the server's representation of the dNSBlock, and an error, if there is any.
func (c *FakeDNSBlocks) Update(ctx context.Context, dNSBlock *v1alpha1.DNSBlock, opts v1.UpdateOptions) (result *v1alpha1.DNSBlock, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(dnsblocksResource, c.ns, dNSBlock), &v1alpha1.DNSBlock{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DNSBlock), err
}

// Delete takes name of the dNSBlock and deletes it. Returns an error if one occurs.
func (c *FakeDNSBlocks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(dnsblocksResource, c.ns, name, opts), &v1alpha1.DNSBlock{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDNSBlocks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(dnsblocksResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.DNSBlockList{})
	return err
}

// Patch applies the patch and returns the patched dNSBlock.
func (c *FakeDNSBlocks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.DNSBlock, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(dnsblocksResource, c.ns, name, pt, data, subresources...), &v1alpha1.DNSBlock{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DNSBlock), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied dNSBlock.
func (c *FakeDNSBlocks) Apply(ctx context.Context, dNSBlock *dnsblockv1alpha1.DNSBlockApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.DNSBlock, err error) {
	if dNSBlock == nil {
		return nil, fmt.Errorf("dNSBlock provided to Apply must not be nil")
	}
	data, err := json.Marshal(dNSBlock)
	if err != nil {
		return nil, err
	}
	name := dNSBlock.Name
	if name == nil {
		return nil, fmt.Errorf("dNSBlock.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(dnsblocksResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.DNSBlock{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.DNSBlock), err
}
